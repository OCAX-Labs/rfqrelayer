// Code generated by mockery v2.30.16. DO NOT EDIT.

package chainmocks

import (
	big "math/big"

	common "github.com/OCAX-labs/rfqrelayer/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/OCAX-labs/rfqrelayer/core/types"
)

// ChainInterface is an autogenerated mock type for the ChainInterface type
type ChainInterface struct {
	mock.Mock
}

// GetBlock provides a mock function with given fields: height
func (_m *ChainInterface) GetBlock(height *big.Int) (*types.Block, error) {
	ret := _m.Called(height)

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*types.Block, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *types.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHash provides a mock function with given fields: hash
func (_m *ChainInterface) GetBlockByHash(hash common.Hash) (*types.Block, error) {
	ret := _m.Called(hash)

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*types.Block, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *types.Block); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeader provides a mock function with given fields: height
func (_m *ChainInterface) GetBlockHeader(height *big.Int) (*types.Header, error) {
	ret := _m.Called(height)

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*types.Header, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *types.Header); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenRFQByHash provides a mock function with given fields: hash
func (_m *ChainInterface) GetOpenRFQByHash(hash common.Hash) (*types.OpenRFQ, error) {
	ret := _m.Called(hash)

	var r0 *types.OpenRFQ
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*types.OpenRFQ, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *types.OpenRFQ); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.OpenRFQ)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenRFQRequests provides a mock function with given fields:
func (_m *ChainInterface) GetOpenRFQRequests() ([]*types.OpenRFQ, error) {
	ret := _m.Called()

	var r0 []*types.OpenRFQ
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.OpenRFQ, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.OpenRFQ); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.OpenRFQ)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRFQRequests provides a mock function with given fields:
func (_m *ChainInterface) GetRFQRequests() ([]*types.RFQRequest, error) {
	ret := _m.Called()

	var r0 []*types.RFQRequest
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.RFQRequest, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.RFQRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.RFQRequest)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxByHash provides a mock function with given fields: hash
func (_m *ChainInterface) GetTxByHash(hash common.Hash) (*types.Transaction, error) {
	ret := _m.Called(hash)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*types.Transaction, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *types.Transaction); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActiveRFQ provides a mock function with given fields: rfqTxHash, quote
func (_m *ChainInterface) UpdateActiveRFQ(rfqTxHash common.Hash, quote *types.Quote) error {
	ret := _m.Called(rfqTxHash, quote)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, *types.Quote) error); ok {
		r0 = rf(rfqTxHash, quote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRFQTxs provides a mock function with given fields: tx
func (_m *ChainInterface) WriteRFQTxs(tx *types.Transaction) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChainInterface creates a new instance of ChainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainInterface {
	mock := &ChainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
